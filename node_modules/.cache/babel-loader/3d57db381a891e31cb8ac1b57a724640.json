{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport clamp from 'lodash-es/clamp';\nimport debounce from 'lodash-es/debounce';\nimport { ScrollbarPlugin } from 'smooth-scrollbar';\nimport { Bounce } from './bounce';\nimport { Glow } from './glow';\nexport var OverscrollEffect;\n\n(function (OverscrollEffect) {\n  OverscrollEffect[\"BOUNCE\"] = \"bounce\";\n  OverscrollEffect[\"GLOW\"] = \"glow\";\n})(OverscrollEffect || (OverscrollEffect = {}));\n\nvar ALLOWED_EVENTS = /wheel|touch/;\n\nvar OverscrollPlugin =\n/** @class */\nfunction (_super) {\n  __extends(OverscrollPlugin, _super);\n\n  function OverscrollPlugin() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._glow = new Glow(_this.scrollbar);\n    _this._bounce = new Bounce(_this.scrollbar);\n    _this._wheelScrollBack = {\n      x: false,\n      y: false\n    };\n    _this._lockWheel = {\n      x: false,\n      y: false\n    };\n    _this._touching = false;\n    _this._amplitude = {\n      x: 0,\n      y: 0\n    };\n    _this._position = {\n      x: 0,\n      y: 0\n    }; // since we can't detect whether user release touchpad\n    // handle it with debounce is the best solution now, as a trade-off\n\n    _this._releaseWheel = debounce(function () {\n      _this._lockWheel.x = false;\n      _this._lockWheel.y = false;\n    }, 30);\n    return _this;\n  }\n\n  Object.defineProperty(OverscrollPlugin.prototype, \"_isWheelLocked\", {\n    get: function () {\n      return this._lockWheel.x || this._lockWheel.y;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OverscrollPlugin.prototype, \"_enabled\", {\n    get: function () {\n      return !!this.options.effect;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  OverscrollPlugin.prototype.onInit = function () {\n    var _a = this,\n        _glow = _a._glow,\n        options = _a.options,\n        scrollbar = _a.scrollbar; // observe\n\n\n    var effect = options.effect;\n    Object.defineProperty(options, 'effect', {\n      get: function () {\n        return effect;\n      },\n      set: function (val) {\n        if (!val) {\n          effect = undefined;\n          return;\n        }\n\n        if (val !== OverscrollEffect.BOUNCE && val !== OverscrollEffect.GLOW) {\n          throw new TypeError(\"unknow overscroll effect: \" + val);\n        }\n\n        effect = val;\n        scrollbar.options.continuousScrolling = false;\n\n        if (val === OverscrollEffect.GLOW) {\n          _glow.mount();\n\n          _glow.adjust();\n        } else {\n          _glow.unmount();\n        }\n      }\n    });\n    options.effect = effect; // init\n  };\n\n  OverscrollPlugin.prototype.onUpdate = function () {\n    if (this.options.effect === OverscrollEffect.GLOW) {\n      this._glow.adjust();\n    }\n  };\n\n  OverscrollPlugin.prototype.onRender = function (remainMomentum) {\n    if (!this._enabled) {\n      return;\n    }\n\n    if (this.scrollbar.options.continuousScrolling) {\n      // turn off continuous scrolling\n      this.scrollbar.options.continuousScrolling = false;\n    }\n\n    var nextX = remainMomentum.x,\n        nextY = remainMomentum.y; // transfer remain momentum to overscroll\n\n    if (!this._amplitude.x && this._willOverscroll('x', remainMomentum.x)) {\n      nextX = 0;\n\n      this._absorbMomentum('x', remainMomentum.x);\n    }\n\n    if (!this._amplitude.y && this._willOverscroll('y', remainMomentum.y)) {\n      nextY = 0;\n\n      this._absorbMomentum('y', remainMomentum.y);\n    }\n\n    this.scrollbar.setMomentum(nextX, nextY);\n\n    this._render();\n  };\n\n  OverscrollPlugin.prototype.transformDelta = function (delta, fromEvent) {\n    this._lastEventType = fromEvent.type;\n\n    if (!this._enabled || !ALLOWED_EVENTS.test(fromEvent.type)) {\n      return delta;\n    }\n\n    if (this._isWheelLocked && /wheel/.test(fromEvent.type)) {\n      this._releaseWheel();\n\n      if (this._willOverscroll('x', delta.x)) {\n        delta.x = 0;\n      }\n\n      if (this._willOverscroll('y', delta.y)) {\n        delta.y = 0;\n      }\n    }\n\n    var nextX = delta.x,\n        nextY = delta.y;\n\n    if (this._willOverscroll('x', delta.x)) {\n      nextX = 0;\n\n      this._addAmplitude('x', delta.x);\n    }\n\n    if (this._willOverscroll('y', delta.y)) {\n      nextY = 0;\n\n      this._addAmplitude('y', delta.y);\n    }\n\n    switch (fromEvent.type) {\n      case 'touchstart':\n      case 'touchmove':\n        this._touching = true;\n\n        this._glow.recordTouch(fromEvent);\n\n        break;\n\n      case 'touchcancel':\n      case 'touchend':\n        this._touching = false;\n        break;\n    }\n\n    return {\n      x: nextX,\n      y: nextY\n    };\n  };\n\n  OverscrollPlugin.prototype._willOverscroll = function (direction, delta) {\n    if (!delta) {\n      return false;\n    } // away from origin\n\n\n    if (this._position[direction]) {\n      return true;\n    }\n\n    var offset = this.scrollbar.offset[direction];\n    var limit = this.scrollbar.limit[direction];\n\n    if (limit === 0) {\n      return false;\n    } // cond:\n    //  1. next scrolling position is supposed to stay unchange\n    //  2. current position is on the edge\n\n\n    return clamp(offset + delta, 0, limit) === offset && (offset === 0 || offset === limit);\n  };\n\n  OverscrollPlugin.prototype._absorbMomentum = function (direction, remainMomentum) {\n    var _a = this,\n        options = _a.options,\n        _lastEventType = _a._lastEventType,\n        _amplitude = _a._amplitude;\n\n    if (!ALLOWED_EVENTS.test(_lastEventType)) {\n      return;\n    }\n\n    _amplitude[direction] = clamp(remainMomentum, -options.maxOverscroll, options.maxOverscroll);\n  };\n\n  OverscrollPlugin.prototype._addAmplitude = function (direction, delta) {\n    var _a = this,\n        options = _a.options,\n        scrollbar = _a.scrollbar,\n        _amplitude = _a._amplitude,\n        _position = _a._position;\n\n    var currentAmp = _amplitude[direction];\n    var isOpposite = delta * currentAmp < 0;\n    var friction;\n\n    if (isOpposite) {\n      // opposite direction\n      friction = 0;\n    } else {\n      friction = this._wheelScrollBack[direction] ? 1 : Math.abs(currentAmp / options.maxOverscroll);\n    }\n\n    var amp = currentAmp + delta * (1 - friction);\n    _amplitude[direction] = scrollbar.offset[direction] === 0 ?\n    /*    top | left  */\n    clamp(amp, -options.maxOverscroll, 0) :\n    /* bottom | right */\n    clamp(amp, 0, options.maxOverscroll);\n\n    if (isOpposite) {\n      // scroll back\n      _position[direction] = _amplitude[direction];\n    }\n  };\n\n  OverscrollPlugin.prototype._render = function () {\n    var _a = this,\n        options = _a.options,\n        _amplitude = _a._amplitude,\n        _position = _a._position;\n\n    if (this._enabled && (_amplitude.x || _amplitude.y || _position.x || _position.y)) {\n      var nextX = this._nextAmp('x');\n\n      var nextY = this._nextAmp('y');\n\n      _amplitude.x = nextX.amplitude;\n      _position.x = nextX.position;\n      _amplitude.y = nextY.amplitude;\n      _position.y = nextY.position;\n\n      switch (options.effect) {\n        case OverscrollEffect.BOUNCE:\n          this._bounce.render(_position);\n\n          break;\n\n        case OverscrollEffect.GLOW:\n          this._glow.render(_position, this.options.glowColor);\n\n          break;\n      }\n\n      if (typeof options.onScroll === 'function') {\n        options.onScroll.call(this, __assign({}, _position));\n      }\n    }\n  };\n\n  OverscrollPlugin.prototype._nextAmp = function (direction) {\n    var _a = this,\n        options = _a.options,\n        _amplitude = _a._amplitude,\n        _position = _a._position;\n\n    var t = 1 - options.damping;\n    var amp = _amplitude[direction];\n    var pos = _position[direction];\n    var nextAmp = this._touching ? amp : amp * t | 0;\n    var distance = nextAmp - pos;\n    var nextPos = pos + distance - (distance * t | 0);\n\n    if (!this._touching && Math.abs(nextPos) < Math.abs(pos)) {\n      this._wheelScrollBack[direction] = true;\n    }\n\n    if (this._wheelScrollBack[direction] && Math.abs(nextPos) <= 1) {\n      this._wheelScrollBack[direction] = false;\n      this._lockWheel[direction] = true;\n    }\n\n    return {\n      amplitude: nextAmp,\n      position: nextPos\n    };\n  };\n\n  OverscrollPlugin.pluginName = 'overscroll';\n  OverscrollPlugin.defaultOptions = {\n    effect: OverscrollEffect.BOUNCE,\n    onScroll: undefined,\n    damping: 0.2,\n    maxOverscroll: 150,\n    glowColor: '#87ceeb'\n  };\n  return OverscrollPlugin;\n}(ScrollbarPlugin);\n\nexport default OverscrollPlugin;","map":{"version":3,"sources":["../../src/plugins/overscroll/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport clamp from 'lodash-es/clamp';\nimport debounce from 'lodash-es/debounce';\nimport { ScrollbarPlugin } from 'smooth-scrollbar';\nimport { Bounce } from './bounce';\nimport { Glow } from './glow';\nexport var OverscrollEffect;\n(function (OverscrollEffect) {\n    OverscrollEffect[\"BOUNCE\"] = \"bounce\";\n    OverscrollEffect[\"GLOW\"] = \"glow\";\n})(OverscrollEffect || (OverscrollEffect = {}));\nvar ALLOWED_EVENTS = /wheel|touch/;\nvar OverscrollPlugin = /** @class */ (function (_super) {\n    __extends(OverscrollPlugin, _super);\n    function OverscrollPlugin() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._glow = new Glow(_this.scrollbar);\n        _this._bounce = new Bounce(_this.scrollbar);\n        _this._wheelScrollBack = {\n            x: false,\n            y: false,\n        };\n        _this._lockWheel = {\n            x: false,\n            y: false,\n        };\n        _this._touching = false;\n        _this._amplitude = {\n            x: 0,\n            y: 0,\n        };\n        _this._position = {\n            x: 0,\n            y: 0,\n        };\n        // since we can't detect whether user release touchpad\n        // handle it with debounce is the best solution now, as a trade-off\n        _this._releaseWheel = debounce(function () {\n            _this._lockWheel.x = false;\n            _this._lockWheel.y = false;\n        }, 30);\n        return _this;\n    }\n    Object.defineProperty(OverscrollPlugin.prototype, \"_isWheelLocked\", {\n        get: function () {\n            return this._lockWheel.x || this._lockWheel.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverscrollPlugin.prototype, \"_enabled\", {\n        get: function () {\n            return !!this.options.effect;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OverscrollPlugin.prototype.onInit = function () {\n        var _a = this, _glow = _a._glow, options = _a.options, scrollbar = _a.scrollbar;\n        // observe\n        var effect = options.effect;\n        Object.defineProperty(options, 'effect', {\n            get: function () {\n                return effect;\n            },\n            set: function (val) {\n                if (!val) {\n                    effect = undefined;\n                    return;\n                }\n                if (val !== OverscrollEffect.BOUNCE && val !== OverscrollEffect.GLOW) {\n                    throw new TypeError(\"unknow overscroll effect: \" + val);\n                }\n                effect = val;\n                scrollbar.options.continuousScrolling = false;\n                if (val === OverscrollEffect.GLOW) {\n                    _glow.mount();\n                    _glow.adjust();\n                }\n                else {\n                    _glow.unmount();\n                }\n            },\n        });\n        options.effect = effect; // init\n    };\n    OverscrollPlugin.prototype.onUpdate = function () {\n        if (this.options.effect === OverscrollEffect.GLOW) {\n            this._glow.adjust();\n        }\n    };\n    OverscrollPlugin.prototype.onRender = function (remainMomentum) {\n        if (!this._enabled) {\n            return;\n        }\n        if (this.scrollbar.options.continuousScrolling) {\n            // turn off continuous scrolling\n            this.scrollbar.options.continuousScrolling = false;\n        }\n        var nextX = remainMomentum.x, nextY = remainMomentum.y;\n        // transfer remain momentum to overscroll\n        if (!this._amplitude.x &&\n            this._willOverscroll('x', remainMomentum.x)) {\n            nextX = 0;\n            this._absorbMomentum('x', remainMomentum.x);\n        }\n        if (!this._amplitude.y &&\n            this._willOverscroll('y', remainMomentum.y)) {\n            nextY = 0;\n            this._absorbMomentum('y', remainMomentum.y);\n        }\n        this.scrollbar.setMomentum(nextX, nextY);\n        this._render();\n    };\n    OverscrollPlugin.prototype.transformDelta = function (delta, fromEvent) {\n        this._lastEventType = fromEvent.type;\n        if (!this._enabled || !ALLOWED_EVENTS.test(fromEvent.type)) {\n            return delta;\n        }\n        if (this._isWheelLocked && /wheel/.test(fromEvent.type)) {\n            this._releaseWheel();\n            if (this._willOverscroll('x', delta.x)) {\n                delta.x = 0;\n            }\n            if (this._willOverscroll('y', delta.y)) {\n                delta.y = 0;\n            }\n        }\n        var nextX = delta.x, nextY = delta.y;\n        if (this._willOverscroll('x', delta.x)) {\n            nextX = 0;\n            this._addAmplitude('x', delta.x);\n        }\n        if (this._willOverscroll('y', delta.y)) {\n            nextY = 0;\n            this._addAmplitude('y', delta.y);\n        }\n        switch (fromEvent.type) {\n            case 'touchstart':\n            case 'touchmove':\n                this._touching = true;\n                this._glow.recordTouch(fromEvent);\n                break;\n            case 'touchcancel':\n            case 'touchend':\n                this._touching = false;\n                break;\n        }\n        return {\n            x: nextX,\n            y: nextY,\n        };\n    };\n    OverscrollPlugin.prototype._willOverscroll = function (direction, delta) {\n        if (!delta) {\n            return false;\n        }\n        // away from origin\n        if (this._position[direction]) {\n            return true;\n        }\n        var offset = this.scrollbar.offset[direction];\n        var limit = this.scrollbar.limit[direction];\n        if (limit === 0) {\n            return false;\n        }\n        // cond:\n        //  1. next scrolling position is supposed to stay unchange\n        //  2. current position is on the edge\n        return clamp(offset + delta, 0, limit) === offset &&\n            (offset === 0 || offset === limit);\n    };\n    OverscrollPlugin.prototype._absorbMomentum = function (direction, remainMomentum) {\n        var _a = this, options = _a.options, _lastEventType = _a._lastEventType, _amplitude = _a._amplitude;\n        if (!ALLOWED_EVENTS.test(_lastEventType)) {\n            return;\n        }\n        _amplitude[direction] = clamp(remainMomentum, -options.maxOverscroll, options.maxOverscroll);\n    };\n    OverscrollPlugin.prototype._addAmplitude = function (direction, delta) {\n        var _a = this, options = _a.options, scrollbar = _a.scrollbar, _amplitude = _a._amplitude, _position = _a._position;\n        var currentAmp = _amplitude[direction];\n        var isOpposite = delta * currentAmp < 0;\n        var friction;\n        if (isOpposite) {\n            // opposite direction\n            friction = 0;\n        }\n        else {\n            friction = this._wheelScrollBack[direction] ?\n                1 : Math.abs(currentAmp / options.maxOverscroll);\n        }\n        var amp = currentAmp + delta * (1 - friction);\n        _amplitude[direction] = scrollbar.offset[direction] === 0 ?\n            /*    top | left  */ clamp(amp, -options.maxOverscroll, 0) :\n            /* bottom | right */ clamp(amp, 0, options.maxOverscroll);\n        if (isOpposite) {\n            // scroll back\n            _position[direction] = _amplitude[direction];\n        }\n    };\n    OverscrollPlugin.prototype._render = function () {\n        var _a = this, options = _a.options, _amplitude = _a._amplitude, _position = _a._position;\n        if (this._enabled &&\n            (_amplitude.x || _amplitude.y || _position.x || _position.y)) {\n            var nextX = this._nextAmp('x');\n            var nextY = this._nextAmp('y');\n            _amplitude.x = nextX.amplitude;\n            _position.x = nextX.position;\n            _amplitude.y = nextY.amplitude;\n            _position.y = nextY.position;\n            switch (options.effect) {\n                case OverscrollEffect.BOUNCE:\n                    this._bounce.render(_position);\n                    break;\n                case OverscrollEffect.GLOW:\n                    this._glow.render(_position, this.options.glowColor);\n                    break;\n            }\n            if (typeof options.onScroll === 'function') {\n                options.onScroll.call(this, __assign({}, _position));\n            }\n        }\n    };\n    OverscrollPlugin.prototype._nextAmp = function (direction) {\n        var _a = this, options = _a.options, _amplitude = _a._amplitude, _position = _a._position;\n        var t = 1 - options.damping;\n        var amp = _amplitude[direction];\n        var pos = _position[direction];\n        var nextAmp = this._touching ? amp : (amp * t | 0);\n        var distance = nextAmp - pos;\n        var nextPos = pos + distance - (distance * t | 0);\n        if (!this._touching && Math.abs(nextPos) < Math.abs(pos)) {\n            this._wheelScrollBack[direction] = true;\n        }\n        if (this._wheelScrollBack[direction] && Math.abs(nextPos) <= 1) {\n            this._wheelScrollBack[direction] = false;\n            this._lockWheel[direction] = true;\n        }\n        return {\n            amplitude: nextAmp,\n            position: nextPos,\n        };\n    };\n    OverscrollPlugin.pluginName = 'overscroll';\n    OverscrollPlugin.defaultOptions = {\n        effect: OverscrollEffect.BOUNCE,\n        onScroll: undefined,\n        damping: 0.2,\n        maxOverscroll: 150,\n        glowColor: '#87ceeb',\n    };\n    return OverscrollPlugin;\n}(ScrollbarPlugin));\nexport default OverscrollPlugin;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}