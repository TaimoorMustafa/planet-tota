{"ast":null,"code":"/*! @name videojs-contrib-quality-levels @version 2.1.0 @license Apache-2.0 */\nimport videojs from 'video.js';\nimport document from 'global/document';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n/**\n * A single QualityLevel.\n *\n * interface QualityLevel {\n *   readonly attribute DOMString id;\n *            attribute DOMString label;\n *   readonly attribute long width;\n *   readonly attribute long height;\n *   readonly attribute long bitrate;\n *            attribute boolean enabled;\n * };\n *\n * @class QualityLevel\n */\n\n\nvar QualityLevel =\n/**\n * Creates a QualityLevel\n *\n * @param {Representation|Object} representation The representation of the quality level\n * @param {string}   representation.id        Unique id of the QualityLevel\n * @param {number=}  representation.width     Resolution width of the QualityLevel\n * @param {number=}  representation.height    Resolution height of the QualityLevel\n * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n */\nfunction QualityLevel(representation) {\n  var level = this; // eslint-disable-line\n\n  if (videojs.browser.IS_IE8) {\n    level = document.createElement('custom');\n\n    for (var prop in QualityLevel.prototype) {\n      if (prop !== 'constructor') {\n        level[prop] = QualityLevel.prototype[prop];\n      }\n    }\n  }\n\n  level.id = representation.id;\n  level.label = level.id;\n  level.width = representation.width;\n  level.height = representation.height;\n  level.bitrate = representation.bandwidth;\n  level.enabled_ = representation.enabled;\n  Object.defineProperty(level, 'enabled', {\n    /**\n     * Get whether the QualityLevel is enabled.\n     *\n     * @return {boolean} True if the QualityLevel is enabled.\n     */\n    get: function get() {\n      return level.enabled_();\n    },\n\n    /**\n     * Enable or disable the QualityLevel.\n     *\n     * @param {boolean} enable true to enable QualityLevel, false to disable.\n     */\n    set: function set(enable) {\n      level.enabled_(enable);\n    }\n  });\n  return level;\n};\n/**\n * A list of QualityLevels.\n *\n * interface QualityLevelList : EventTarget {\n *   getter QualityLevel (unsigned long index);\n *   readonly attribute unsigned long length;\n *   readonly attribute long selectedIndex;\n *\n *   void addQualityLevel(QualityLevel qualityLevel)\n *   void removeQualityLevel(QualityLevel remove)\n *   QualityLevel? getQualityLevelById(DOMString id);\n *\n *   attribute EventHandler onchange;\n *   attribute EventHandler onaddqualitylevel;\n *   attribute EventHandler onremovequalitylevel;\n * };\n *\n * @extends videojs.EventTarget\n * @class QualityLevelList\n */\n\n\nvar QualityLevelList = /*#__PURE__*/function (_videojs$EventTarget) {\n  _inheritsLoose(QualityLevelList, _videojs$EventTarget);\n\n  function QualityLevelList() {\n    var _this;\n\n    _this = _videojs$EventTarget.call(this) || this;\n\n    var list = _assertThisInitialized(_assertThisInitialized(_this)); // eslint-disable-line\n\n\n    if (videojs.browser.IS_IE8) {\n      list = document.createElement('custom');\n\n      for (var prop in QualityLevelList.prototype) {\n        if (prop !== 'constructor') {\n          list[prop] = QualityLevelList.prototype[prop];\n        }\n      }\n    }\n\n    list.levels_ = [];\n    list.selectedIndex_ = -1;\n    /**\n     * Get the index of the currently selected QualityLevel.\n     *\n     * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'selectedIndex', {\n      get: function get() {\n        return list.selectedIndex_;\n      }\n    });\n    /**\n     * Get the length of the list of QualityLevels.\n     *\n     * @returns {number} The length of the list.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'length', {\n      get: function get() {\n        return list.levels_.length;\n      }\n    });\n    return list || _assertThisInitialized(_this);\n  }\n  /**\n   * Adds a quality level to the list.\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   * @return {QualityLevel} the QualityLevel added to the list\n   * @method addQualityLevel\n   */\n\n\n  var _proto = QualityLevelList.prototype;\n\n  _proto.addQualityLevel = function addQualityLevel(representation) {\n    var qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n    if (qualityLevel) {\n      return qualityLevel;\n    }\n\n    var index = this.levels_.length;\n    qualityLevel = new QualityLevel(representation);\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get() {\n          return this.levels_[index];\n        }\n      });\n    }\n\n    this.levels_.push(qualityLevel);\n    this.trigger({\n      qualityLevel: qualityLevel,\n      type: 'addqualitylevel'\n    });\n    return qualityLevel;\n  };\n  /**\n   * Removes a quality level from the list.\n   *\n   * @param {QualityLevel} remove QualityLevel to remove to the list.\n   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n   * @method removeQualityLevel\n   */\n\n\n  _proto.removeQualityLevel = function removeQualityLevel(qualityLevel) {\n    var removed = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === qualityLevel) {\n        removed = this.levels_.splice(i, 1)[0];\n\n        if (this.selectedIndex_ === i) {\n          this.selectedIndex_ = -1;\n        } else if (this.selectedIndex_ > i) {\n          this.selectedIndex_--;\n        }\n\n        break;\n      }\n    }\n\n    if (removed) {\n      this.trigger({\n        qualityLevel: qualityLevel,\n        type: 'removequalitylevel'\n      });\n    }\n\n    return removed;\n  };\n  /**\n   * Searches for a QualityLevel with the given id.\n   *\n   * @param {string} id The id of the QualityLevel to find.\n   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n   * @method getQualityLevelById\n   */\n\n\n  _proto.getQualityLevelById = function getQualityLevelById(id) {\n    for (var i = 0, l = this.length; i < l; i++) {\n      var level = this[i];\n\n      if (level.id === id) {\n        return level;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Resets the list of QualityLevels to empty\n   *\n   * @method dispose\n   */\n\n\n  _proto.dispose = function dispose() {\n    this.selectedIndex_ = -1;\n    this.levels_.length = 0;\n  };\n\n  return QualityLevelList;\n}(videojs.EventTarget);\n/**\n * change - The selected QualityLevel has changed.\n * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n */\n\n\nQualityLevelList.prototype.allowedEvents_ = {\n  change: 'change',\n  addqualitylevel: 'addqualitylevel',\n  removequalitylevel: 'removequalitylevel'\n}; // emulate attribute EventHandler support to allow for feature detection\n\nfor (var event in QualityLevelList.prototype.allowedEvents_) {\n  QualityLevelList.prototype['on' + event] = null;\n}\n\nvar version = \"2.1.0\";\nvar registerPlugin = videojs.registerPlugin || videojs.plugin;\n/**\n * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n * event handlers.\n *\n * @param {Player} player Player object.\n * @param {Object} options Plugin options object.\n * @function initPlugin\n */\n\nvar initPlugin = function initPlugin(player, options) {\n  var originalPluginFn = player.qualityLevels;\n  var qualityLevelList = new QualityLevelList();\n\n  var disposeHandler = function disposeHandler() {\n    qualityLevelList.dispose();\n    player.qualityLevels = originalPluginFn;\n    player.off('dispose', disposeHandler);\n  };\n\n  player.on('dispose', disposeHandler);\n\n  player.qualityLevels = function () {\n    return qualityLevelList;\n  };\n\n  player.qualityLevels.VERSION = version;\n  return qualityLevelList;\n};\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @param {Object} options Plugin options object\n * @function qualityLevels\n */\n\n\nvar qualityLevels = function qualityLevels(options) {\n  return initPlugin(this, videojs.mergeOptions({}, options));\n}; // Register the plugin with video.js.\n\n\nregisterPlugin('qualityLevels', qualityLevels); // Include the version number.\n\nqualityLevels.VERSION = version;\nexport default qualityLevels;","map":{"version":3,"sources":["C:/Taimoor Work/Taimoor Work/DIT-Code/planet-tota-new/planettota/node_modules/videojs-contrib-quality-levels/dist/videojs-contrib-quality-levels.es.js"],"names":["videojs","document","_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_assertThisInitialized","self","ReferenceError","QualityLevel","representation","level","browser","IS_IE8","createElement","prop","id","label","width","height","bitrate","bandwidth","enabled_","enabled","defineProperty","get","set","enable","QualityLevelList","_videojs$EventTarget","_this","call","list","levels_","selectedIndex_","length","_proto","addQualityLevel","qualityLevel","getQualityLevelById","index","push","trigger","type","removeQualityLevel","removed","i","l","splice","dispose","EventTarget","allowedEvents_","change","addqualitylevel","removequalitylevel","event","version","registerPlugin","plugin","initPlugin","player","options","originalPluginFn","qualityLevels","qualityLevelList","disposeHandler","off","on","VERSION","mergeOptions"],"mappings":"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","sourcesContent":["/*! @name videojs-contrib-quality-levels @version 2.1.0 @license Apache-2.0 */\nimport videojs from 'video.js';\nimport document from 'global/document';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * A single QualityLevel.\n *\n * interface QualityLevel {\n *   readonly attribute DOMString id;\n *            attribute DOMString label;\n *   readonly attribute long width;\n *   readonly attribute long height;\n *   readonly attribute long bitrate;\n *            attribute boolean enabled;\n * };\n *\n * @class QualityLevel\n */\n\nvar QualityLevel =\n/**\n * Creates a QualityLevel\n *\n * @param {Representation|Object} representation The representation of the quality level\n * @param {string}   representation.id        Unique id of the QualityLevel\n * @param {number=}  representation.width     Resolution width of the QualityLevel\n * @param {number=}  representation.height    Resolution height of the QualityLevel\n * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n */\nfunction QualityLevel(representation) {\n  var level = this; // eslint-disable-line\n\n  if (videojs.browser.IS_IE8) {\n    level = document.createElement('custom');\n\n    for (var prop in QualityLevel.prototype) {\n      if (prop !== 'constructor') {\n        level[prop] = QualityLevel.prototype[prop];\n      }\n    }\n  }\n\n  level.id = representation.id;\n  level.label = level.id;\n  level.width = representation.width;\n  level.height = representation.height;\n  level.bitrate = representation.bandwidth;\n  level.enabled_ = representation.enabled;\n  Object.defineProperty(level, 'enabled', {\n    /**\n     * Get whether the QualityLevel is enabled.\n     *\n     * @return {boolean} True if the QualityLevel is enabled.\n     */\n    get: function get() {\n      return level.enabled_();\n    },\n\n    /**\n     * Enable or disable the QualityLevel.\n     *\n     * @param {boolean} enable true to enable QualityLevel, false to disable.\n     */\n    set: function set(enable) {\n      level.enabled_(enable);\n    }\n  });\n  return level;\n};\n\n/**\n * A list of QualityLevels.\n *\n * interface QualityLevelList : EventTarget {\n *   getter QualityLevel (unsigned long index);\n *   readonly attribute unsigned long length;\n *   readonly attribute long selectedIndex;\n *\n *   void addQualityLevel(QualityLevel qualityLevel)\n *   void removeQualityLevel(QualityLevel remove)\n *   QualityLevel? getQualityLevelById(DOMString id);\n *\n *   attribute EventHandler onchange;\n *   attribute EventHandler onaddqualitylevel;\n *   attribute EventHandler onremovequalitylevel;\n * };\n *\n * @extends videojs.EventTarget\n * @class QualityLevelList\n */\n\nvar QualityLevelList =\n/*#__PURE__*/\nfunction (_videojs$EventTarget) {\n  _inheritsLoose(QualityLevelList, _videojs$EventTarget);\n\n  function QualityLevelList() {\n    var _this;\n\n    _this = _videojs$EventTarget.call(this) || this;\n\n    var list = _assertThisInitialized(_assertThisInitialized(_this)); // eslint-disable-line\n\n\n    if (videojs.browser.IS_IE8) {\n      list = document.createElement('custom');\n\n      for (var prop in QualityLevelList.prototype) {\n        if (prop !== 'constructor') {\n          list[prop] = QualityLevelList.prototype[prop];\n        }\n      }\n    }\n\n    list.levels_ = [];\n    list.selectedIndex_ = -1;\n    /**\n     * Get the index of the currently selected QualityLevel.\n     *\n     * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'selectedIndex', {\n      get: function get() {\n        return list.selectedIndex_;\n      }\n    });\n    /**\n     * Get the length of the list of QualityLevels.\n     *\n     * @returns {number} The length of the list.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'length', {\n      get: function get() {\n        return list.levels_.length;\n      }\n    });\n    return list || _assertThisInitialized(_this);\n  }\n  /**\n   * Adds a quality level to the list.\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   * @return {QualityLevel} the QualityLevel added to the list\n   * @method addQualityLevel\n   */\n\n\n  var _proto = QualityLevelList.prototype;\n\n  _proto.addQualityLevel = function addQualityLevel(representation) {\n    var qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n    if (qualityLevel) {\n      return qualityLevel;\n    }\n\n    var index = this.levels_.length;\n    qualityLevel = new QualityLevel(representation);\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get() {\n          return this.levels_[index];\n        }\n      });\n    }\n\n    this.levels_.push(qualityLevel);\n    this.trigger({\n      qualityLevel: qualityLevel,\n      type: 'addqualitylevel'\n    });\n    return qualityLevel;\n  };\n  /**\n   * Removes a quality level from the list.\n   *\n   * @param {QualityLevel} remove QualityLevel to remove to the list.\n   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n   * @method removeQualityLevel\n   */\n\n\n  _proto.removeQualityLevel = function removeQualityLevel(qualityLevel) {\n    var removed = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === qualityLevel) {\n        removed = this.levels_.splice(i, 1)[0];\n\n        if (this.selectedIndex_ === i) {\n          this.selectedIndex_ = -1;\n        } else if (this.selectedIndex_ > i) {\n          this.selectedIndex_--;\n        }\n\n        break;\n      }\n    }\n\n    if (removed) {\n      this.trigger({\n        qualityLevel: qualityLevel,\n        type: 'removequalitylevel'\n      });\n    }\n\n    return removed;\n  };\n  /**\n   * Searches for a QualityLevel with the given id.\n   *\n   * @param {string} id The id of the QualityLevel to find.\n   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n   * @method getQualityLevelById\n   */\n\n\n  _proto.getQualityLevelById = function getQualityLevelById(id) {\n    for (var i = 0, l = this.length; i < l; i++) {\n      var level = this[i];\n\n      if (level.id === id) {\n        return level;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Resets the list of QualityLevels to empty\n   *\n   * @method dispose\n   */\n\n\n  _proto.dispose = function dispose() {\n    this.selectedIndex_ = -1;\n    this.levels_.length = 0;\n  };\n\n  return QualityLevelList;\n}(videojs.EventTarget);\n/**\n * change - The selected QualityLevel has changed.\n * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n */\n\n\nQualityLevelList.prototype.allowedEvents_ = {\n  change: 'change',\n  addqualitylevel: 'addqualitylevel',\n  removequalitylevel: 'removequalitylevel'\n}; // emulate attribute EventHandler support to allow for feature detection\n\nfor (var event in QualityLevelList.prototype.allowedEvents_) {\n  QualityLevelList.prototype['on' + event] = null;\n}\n\nvar version = \"2.1.0\";\n\nvar registerPlugin = videojs.registerPlugin || videojs.plugin;\n/**\n * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n * event handlers.\n *\n * @param {Player} player Player object.\n * @param {Object} options Plugin options object.\n * @function initPlugin\n */\n\nvar initPlugin = function initPlugin(player, options) {\n  var originalPluginFn = player.qualityLevels;\n  var qualityLevelList = new QualityLevelList();\n\n  var disposeHandler = function disposeHandler() {\n    qualityLevelList.dispose();\n    player.qualityLevels = originalPluginFn;\n    player.off('dispose', disposeHandler);\n  };\n\n  player.on('dispose', disposeHandler);\n\n  player.qualityLevels = function () {\n    return qualityLevelList;\n  };\n\n  player.qualityLevels.VERSION = version;\n  return qualityLevelList;\n};\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @param {Object} options Plugin options object\n * @function qualityLevels\n */\n\n\nvar qualityLevels = function qualityLevels(options) {\n  return initPlugin(this, videojs.mergeOptions({}, options));\n}; // Register the plugin with video.js.\n\n\nregisterPlugin('qualityLevels', qualityLevels); // Include the version number.\n\nqualityLevels.VERSION = version;\n\nexport default qualityLevels;\n"]},"metadata":{},"sourceType":"module"}