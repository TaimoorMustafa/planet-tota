import React, { useRef, useState, useEffect } from 'react';
import VIDEOJS from 'video.js';
import videoJsContribQualityLevels from 'videojs-contrib-quality-levels';
import videoJsHlsQualitySelector from 'videojs-hls-quality-selector';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var HOTKEYS_HANDLER = function HOTKEYS_HANDLER(event, player) {
  if (player) {
    var currentTime = player.currentTime();
    var currentVolume = player.volume();
    var isMuted = player.muted();
    var isFullscreen = player.isFullscreen();
    var isPaused = player.paused(); // Go 5 seconds backward

    if (event.code === 'ArrowLeft') {
      player.currentTime(currentTime - 5);
    } // Go 5 seconds forward


    if (event.code === 'ArrowRight') {
      player.currentTime(currentTime + 5);
    } // Increase volume by 5%


    if (event.code === 'ArrowUp') {
      if (currentVolume <= 0.95) {
        player.volume(currentVolume + 0.05);
      } else {
        player.volume(1);
      }
    } // Decrease volume by 5%


    if (event.code === 'ArrowDown') {
      if (currentVolume >= 0.05) {
        player.volume(currentVolume - 0.05);
      } else {
        player.volume(0);
      }
    } // Mute/Unmute toggle


    if (event.code === 'KeyM') {
      if (isMuted) {
        player.muted(false);
      } else {
        player.muted(true);
      }
    } // Fullscreen/Exit toggle


    if (event.code === 'KeyF') {
      if (isFullscreen) {
        player.exitFullscreen();
      } else {
        player.requestFullscreen();
      }
    } // Play/Pause toggle


    if (event.code === 'Space') {
      if (isPaused) {
        player.play();
      } else {
        player.pause();
      }
    }
  }
};

var DEFAULT_OPTIONS = {
  controls: true,
  controlBar: {
    children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'customControlSpacer', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'playbackRateMenuButton', 'fullscreenToggle'],
    progressControl: {
      seekBar: true
    }
  },
  autoplay: false,
  fluid: true,
  inactivityTimeout: 2500,
  preload: 'auto',
  width: 100,
  playbackRates: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 2],
  html5: {
    vhs: {
      enableLowInitialPlaylist: true,
      smoothQualityChange: true,
      overrideNative: true
    }
  },
  plugins: {
    qualityLevel: {},
    hlsQualitySelector: {
      displayCurrentQuality: true
    }
  }
};

function usePlayer(options) {
  var ref = useRef(null);

  var _useState = useState(null),
      player = _useState[0],
      setPlayer = _useState[1];

  useEffect(function () {
    VIDEOJS.registerPlugin('qualityLevel', videoJsContribQualityLevels);
    VIDEOJS.registerPlugin('hlsQualitySelector', videoJsHlsQualitySelector);
  }, []);
  useEffect(function () {
    var vjsPlayer = ref.current ? VIDEOJS(ref.current, _extends({}, DEFAULT_OPTIONS, options, {
      userActions: {
        hotkeys: function hotkeys(event) {
          HOTKEYS_HANDLER(event, vjsPlayer);
        }
      }
    }), function () {
      if (vjsPlayer) {
        setPlayer(vjsPlayer);

        if (options.sources) {
          vjsPlayer.src(options.sources);
        } else if (options.src) {
          vjsPlayer.src(options.src);
        }

        vjsPlayer.currentTime(0);
        vjsPlayer.load();
      }
    }) : null;
    return function () {
      if (vjsPlayer) {
        vjsPlayer.reset();
      }
    };
  }, [options]);
  return {
    ref: ref,
    player: player
  };
}

// ANCHOR React
function UncontrolledLionPlayer(_ref) {
  var playerRef = _ref.playerRef;
  return React.createElement("div", {
    "data-vjs-player": true
  }, React.createElement("video", {
    ref: playerRef,
    className: "video-js vjs-theme-lion"
  }, React.createElement("p", {
    className: "vjs-no-js"
  }, "To view this video please enable JavaScript, and consider upgrading to a web browser that ", React.createElement("a", {
    href: "https://videojs.com/html5-video-support/",
    target: "_blank"
  }, "supports HTML5 video"))));
}

function LionPlayer(props) {
  var _usePlayer = usePlayer(_extends({}, props)),
      ref = _usePlayer.ref;

  return React.createElement(UncontrolledLionPlayer, {
    playerRef: ref
  });
}

export { LionPlayer, UncontrolledLionPlayer, usePlayer };
//# sourceMappingURL=lion-player.esm.js.map
